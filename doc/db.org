#+TITLE: DB API Guide

How to use this PostgreSQL library? Read on.

* SQL Databases
  :PROPERTIES:
  :CUSTOM_ID: sql-databases
  :END:

** Overview
   :PROPERTIES:
   :CUSTOM_ID: overview
   :END:

** Generic Database Interface
   :PROPERTIES:
   :CUSTOM_ID: generic-database-interface
   :END:

#+BEGIN_EXAMPLE
  (import :std/db/dbi)
#+END_EXAMPLE

*** =sql-connect=
    :PROPERTIES:
    :CUSTOM_ID: sql-connect
    :END:

First things first we must connect to a database. Though the actual
function to connect differs between databases, =sql-connect= also makes
a =will= so that the connection is automagically closed using
[[#sqlClose][=sql-close=]] when garbage collected.

#+BEGIN_EXAMPLE
  (import :std/db/postgresql)
  (def db (sql-connect postgresql-connect host: "localhost" user: "foo" passwd: "bar"))
  ;; => #<postgresql-connection #36>
#+END_EXAMPLE

*** =connection?=
    :PROPERTIES:
    :CUSTOM_ID: connection
    :END:

This predicate asks if the thing passed is in fact a connection.

#+BEGIN_EXAMPLE
  (connection? db) ;; => #t
  (connection? car) ;; => #f
#+END_EXAMPLE

*** =sql-eval=
    :PROPERTIES:
    :CUSTOM_ID: sql-eval
    :END:

Often when interacting with the *DB* we do not actually need a result.
=sql-eval= returns /unspecified/ when run. In fact, three letters out of
four, (C)reate, (U)pdate and (D)elete, often need nothing at all.

#+BEGIN_EXAMPLE
  (sql-eval db "CREATE TEMPORARY TABLE foo (bar text)") ;; => #!void
  (sql-eval db "INSERT INTO foo VALUES ('huh?')") ;; => #!void
  (sql-eval db "UPDATE foo SET bar = 'bar' WHERE bar = 'huh?'") ;; => #!void
  (sql-eval db "DELETE FROM foo WHERE bar = 'bar'") ;; => #!void
#+END_EXAMPLE

It can take arguments.

#+BEGIN_EXAMPLE
  (sql-eval db "INSERT INTO foo VALUES ($1)" "yay!") ;; => #!void
#+END_EXAMPLE

*** =sql-eval-query=
    :PROPERTIES:
    :CUSTOM_ID: sql-eval-query
    :END:

The *R* in *CRUD* is likely what is most often used.

#+BEGIN_EXAMPLE
  (sql-eval-query db "SELECT * from foo") ;; =>  ("yay!")
#+END_EXAMPLE

Of course =SELECT= is not the only query that returns things. It can
take arguments as well.

#+BEGIN_EXAMPLE
  (sql-eval-query
   db "INSERT INTO foo
  VALUES ('huh?') returning foo.*") ;; => ("huh?")
  (sql-eval-query
   db "INSERT INTO foo
  VALUES ('huh?, again?') returning foo.*") ;; => ("huh?, again?")


  (sql-eval-query db "WITH q AS (
   UPDATE foo SET bar = 'bar'
   WHERE bar != 'huh?' returning true)
    SELECT count(*) FROM q") ;; => (2)


  (sql-eval-query db "DELETE FROM foo returning foo.*")
  ;; => ("huh?" "bar" "bar")
#+END_EXAMPLE

*** =sql-prepare=
    :PROPERTIES:
    :CUSTOM_ID: sql-prepare
    :END:

Often an evaluation of a query is not enough.

- There's the simple matter of column names as we only return a list of
  results.

- We may want to pass arguments.

For that purpose there's a prepared statement. They are =willed to run=
[[#sqlFinalize][=sql-finalize=]] before taking out the trash.

#+BEGIN_EXAMPLE
  (def istmt (sql-prepare db "INSERT INTO foo VALUES ('bar') RETURNING foo.*;"))

  (def bind-istmt (sql-prepare db "INSERT INTO foo VALUES ($1) returning 'hahaha' AS baz"))

  (def stmt (sql-prepare db "SELECT foo AS bat FROM foo"))
  (def bind-stmt (sql-prepare db "SELECT true AS funnyColumn, * FROM foo WHERE bar = $1"))
#+END_EXAMPLE

*** =statement?=
    :PROPERTIES:
    :CUSTOM_ID: statement
    :END:

Is this an *SQL Statement*?

#+BEGIN_EXAMPLE
  (statement? istmt) ;; => #t
  (statement? 'foobar) ;; =? #f
#+END_EXAMPLE

*** =sql-columns=
    :PROPERTIES:
    :CUSTOM_ID: sql-columns
    :END:

We've got some predicative-ly confirmed prepared statements.
=sql-columns= gives us the column names.

#+BEGIN_EXAMPLE
  (map sql-columns [ istmt bind-istmt stmt bind-stmt ])
  ;; => (("bar") ("baz") ("bat") ("funnycolumn" "bar"))
#+END_EXAMPLE

*** =sql-exec=
    :PROPERTIES:
    :CUSTOM_ID: sql-exec
    :END:

Like the name says this function executes a prepared statement from
[[#sqlPrepare][=sql-prepare=]]. Like [[#sqlEval][=sql-eval=]], which in
fact uses this after it prepares a statement for you, it returns a
useless value.

#+BEGIN_EXAMPLE
  (sql-exec istmt)
#+END_EXAMPLE

A statement can be executed many times.

#+BEGIN_EXAMPLE
  [ (sql-exec istmt) (sql-exec istmt) ] ;; =>  (#!void #!void)

  (sql-eval-query db "SELECT * FROM foo")
  ("bar" "bar" "bar")
#+END_EXAMPLE

Unlike [[#sqlEval][=sql-eval=]], =sql-exec= does not take arguments.

#+BEGIN_EXAMPLE
  (sql-exec bind-istmt "yay!")
  ; Evaluation aborted on Wrong number of arguments passed to procedure
  ; (std/db/dbi#sql-exec '#<postgresql-statement #77> "yay!")
#+END_EXAMPLE

Not only that, calling it with a statement that requires arguments is an
error as well.

#+BEGIN_EXAMPLE
  (sql-exec bind-istmt)
  ; Evaluation aborted on postgresql-exec!: [sql-error] bind message supplies 0
  ; parameters, but prepared statement "stmt539" requires 1 --- irritants: (S .
  ; ERROR) (V . ERROR) (C . 08P01) (M . bind message supplies 0 parameters, but
  ; prepared statement "stmt539" requires 1) (F . postgres.c) (L . 1665) (R .
  ; exec_bind_message)
#+END_EXAMPLE

That's because arguments need to be bound with [[#sqlBind][=sql-bind=]].

*** =sql-query=
    :PROPERTIES:
    :CUSTOM_ID: sql-query
    :END:

Similar to [[#sqlEvalQuery][=sql-eval-query=]] =sql-query= returns the
results of the [[#sqlPrepare][=sql-prepare=]]'d statement in list form.

#+BEGIN_EXAMPLE
  (sql-query stmt) => ("(bar)" "(bar)" "(bar)")
#+END_EXAMPLE

Like [[#sqlExec][=sql-exec=]] it does not take arguments because they
need to be bound with [[#sqlBind][=sql-bind=]].

*** =in-sql-query=
    :PROPERTIES:
    :CUSTOM_ID: in-sql-query
    :END:

For more advanced uses =in-sql-query= takes a statement and returns an
[[file:iterators.md][iterator.]]

#+BEGIN_EXAMPLE
  (import :std/iter)

  (for ((r (in-sql-query stmt)))
    (displayln r))
  ;(bar)
  ;(bar)
  ;(bar)
  ;; => #!void
#+END_EXAMPLE

Being able to take rows from the DB one at a time has some advantages,
especially with [[#sqlReset][reset]], or even
[[#sqlResetClear][reset/clear]].

*** =sql-bind=
    :PROPERTIES:
    :CUSTOM_ID: sql-bind
    :END:

For [[#sqlPrepare][=sql-prepare=]]'d statements that take arguments
=sql-bind= sets them to the value before we run the statement.

#+BEGIN_EXAMPLE
  (sql-bind bind-istmt "yay!") ;; => #!void
  (sql-bind bind-stmt "yay!") ;; => #!void
#+END_EXAMPLE

It does not run it, just sets up the specified environment.

#+BEGIN_EXAMPLE
  (sql-query stmt) ;; => ("(bar)" "(bar)" "(bar)")
#+END_EXAMPLE

To run it we of course use [[#sqlExec][=sql-exec=]] or
[[#sqlQuery][=sql-query=]].

#+BEGIN_EXAMPLE
  (sql-exec bind-istmt) ;; => #!void
  (sql-query bind-stmt) ;; =>  (#(#t "yay!"))
#+END_EXAMPLE

A bound statement can run many times.

#+BEGIN_EXAMPLE
  (sql-exec bind-istmt) ;; => #!void

  (sql-query bind-stmt) ;; => (#(#t "yay!") #(#t "yay!"))
#+END_EXAMPLE

A statement can be rebound.

#+BEGIN_EXAMPLE
  (sql-bind bind-istmt "huh?") ;; => ("hahaha")
  (sql-query bind-istmt) ;; => #!void
  (sql-query stmt)
  ;; => ("(bar)" "(bar)" "(bar)" "(yay!)" "(yay!)" "(huh?)")
#+END_EXAMPLE

It can also be [[#sqlClear][cleared]], [[#sqlReset][reset]], or even
[[#sqlResetClear][reset/clear]]'d.

*** =sql-clear=
    :PROPERTIES:
    :CUSTOM_ID: sql-clear
    :END:

Simply clear the local variables bound to a statement.

#+BEGIN_EXAMPLE
  (sql-clear bind-stmt) ;; => #<postgresql-statement>
  (sql-query bind-stmt)
  ; Evaluation aborted on postgresql-query!: [sql-error] bind message supplies 0
  ; parameters, but prepared statement "stmt149" requires 1 --- irritants: (S .
  ; ERROR) (V . ERROR) (C . 08P01) (M . bind message supplies 0 parameters, but
  ; prepared statement "stmt149" requires 1) (F . postgres.c) (L . 1665) (R .
  ; exec_bind_message)
#+END_EXAMPLE

*** =sql-reset=
    :PROPERTIES:
    :CUSTOM_ID: sql-reset
    :END:

When interacting with the DB a stored proc, after being run, has a
reference to the results and can be considered "set".

Imagine a statement that returns a certain amount of rows.

#+BEGIN_EXAMPLE
  (for ((r (in-sql-query stmt)))
    (displayln r))
  ;(bar)
  ;(bar)
  ;(bar)
  ;(yay!)
  ;(yay!)
  ;(huh?)
  ;; => #!void
#+END_EXAMPLE

For some reason we only want a few. We can so do so and reset it so the
database knows we are done with it.

#+BEGIN_EXAMPLE
  (def count 0)
  (for ((r (in-sql-query stmt)))
    (set! count (1+ count))
    (displayln r count)
    (when (= count 3) (sql-reset stmt)))
  ;(bar)1
  ;(bar)2
  ;(bar)3
  ;; => #!void
#+END_EXAMPLE

*** =sql-reset/clear=
    :PROPERTIES:
    :CUSTOM_ID: sql-resetclear
    :END:

This [[#sqlClear][clears]], and [[#sqlReset][resets]], a stored
procedure.

#+BEGIN_EXAMPLE
  (sql-query bind-stmt) ;; => (#(#t "yay!") #(#t "yay!"))
  (for ((r (in-sql-query bind-stmt)))
    (displayln r) (sql-reset/clear bind-stmt))
  ;#(#t yay!)
  ;; => #!void
  (sql-query bind-stmt)
  ; Evaluation aborted on postgresql-query!: [sql-error] bind message supplies 0
  ; parameters, but prepared statement "stmt137" requires 1 --- irritants: (S .
  ; ERROR) (V . ERROR) (C . 08P01) (M . bind message supplies 0 parameters, but
  ; prepared statement "stmt137" requires 1) (F . postgres.c) (L . 1665) (R .
  ; exec_bind_message)
#+END_EXAMPLE

*** =sql-finalize=
    :PROPERTIES:
    :CUSTOM_ID: sql-finalize
    :END:

When a stored procedure is finalized it is gone for good. While this is
done by the [[#sqlPrepare][garbage collection]] there may be times when
we want to get rid of it now.

#+BEGIN_EXAMPLE
  (map sql-finalize [stmt istmt bind-stmt bind-istmt])
  ;; => (#!void #!void #!void #!void)
  (sql-query stmt)
  ; Evaluation aborted on Invalid operation; statement finalized
  ; #<postgresql-statement>
#+END_EXAMPLE

*** =sql-txn-begin=
    :PROPERTIES:
    :CUSTOM_ID: sql-txn-begin
    :END:

Begins a transaction. See [[#sqlError][=sql-error?=]] for a transaction
if you do not know what one is.

#+BEGIN_EXAMPLE
  (sql-txn-begin db) ;; => #!void
#+END_EXAMPLE

*** =sql-txn-commit=
    :PROPERTIES:
    :CUSTOM_ID: sql-txn-commit
    :END:

Commits a transaction if there's one that can be commited. It errors if
the transaction cannot be commited and otherwise, if there is no
transaction, does nothing at all.

See [[#sqlError][=sql-error?=]] for a transaction that can and cannot be
commited.

#+BEGIN_EXAMPLE
  (sql-txn-commit db) ;; => #!void
  (sql-txn-commit db) ;; => #!void
  (sql-txn-commit db) ;; => #!void
  (sql-txn-commit db) ;; => #!void
  (sql-txn-commit db) ;; => #!void
#+END_EXAMPLE

*** =sql-txn-abort=
    :PROPERTIES:
    :CUSTOM_ID: sql-txn-abort
    :END:

Aborts a transaction. Sometimes we choose to abort, sometimes it is
needed.

#+BEGIN_EXAMPLE
  (sql-txn-abort db)
#+END_EXAMPLE

*** =sql-error?=
    :PROPERTIES:
    :CUSTOM_ID: sql-error
    :END:

Is this error a database error or something else? This predicate tells
us so.

Using it with [[file:sugar.md][try]], we can for example we can make a
connection not error if we have a transaction that error yet leave other
errors thrown.

To start with, no catcher.

#+BEGIN_EXAMPLE
  (sql-txn-begin db) ;; => #!void
  (sql-eval-query db "SELECT 1") ;; => (1)
  (sql-eval-query db "SELECT asd")
  ; Evaluation aborted on postgresql-prepare!: [sql-error] column "asd" does not
  ; exist --- irritants: (S . ERROR) (V . ERROR) (C . 42703) (M . column "asd"
  ; does not exist) (P . 8) (F . parse_relation.c) (L . 3349) (R .
  ; errorMissingColumn)

  (sql-txn-commit db))
  ; Evaluation aborted on postgresql-exec!: [sql-error] current transaction is
  ; aborted, commands ignored until end of transaction block --- irritants: (S .
  ; ERROR) (V . ERROR) (C . 25P02) (M . current transaction is aborted, commands
  ; ignored until end of transaction block) (F . postgres.c) (L . 1682) (R .
  ; exec_bind_message)

  (sql-eval-query db "SELECT 1")
  ; Evaluation aborted on postgresql-prepare!: [sql-error] current transaction is
  ; aborted, commands ignored until end of transaction block --- irritants: (S .
  ; ERROR) (V . ERROR) (C . 25P02) (M . current transaction is aborted, commands
  ; ignored until end of transaction block) (F . postgres.c) (L . 1424) (R .
  ; exec_parse_message)
#+END_EXAMPLE

Now a better =try=.

#+BEGIN_EXAMPLE
  (import :std/sugar)

  (try
   (sql-txn-begin db)
   (sql-eval-query db "SELECT 1")
   (sql-eval-query db "SELECT asd")
   (catch sql-error? => (lambda _ (sql-txn-abort db)))
   (finally (sql-txn-commit db))) ;; => #!void

  (sql-eval-query db "SELECT 1") ;; => (1)
#+END_EXAMPLE

*** =sql-close=
    :PROPERTIES:
    :CUSTOM_ID: sql-close
    :END:

Close a database connection.

#+BEGIN_EXAMPLE
  (sql-eval-query db "SELECT 1") ;; => (1)
  (sql-close db) ;; => #!void
  (sql-eval-query db "SELECT 1")
  ; Evaluation aborted on Invalid operation; connection closed
  ; #<postgresql-connection>
  (sql-close db) ;; => #!void
  (sql-close db) ;; => #!void
#+END_EXAMPLE

** PostgreSQL driver
   :PROPERTIES:
   :CUSTOM_ID: postgresql-driver
   :END:

#+BEGIN_EXAMPLE
  (import :std/db/postgresql)
#+END_EXAMPLE

Have a look at
[[https://github.com/vyzo/gerbil/blob/master/src/std/db/postgresql-test.ss][the
postgresql-test.ss file]] to see more of how it is used with the
=:std/db/dbi=.

*** =postgresql-connect=
    :PROPERTIES:
    :CUSTOM_ID: postgresql-connect
    :END:

The first way is simply to use the function.

#+BEGIN_EXAMPLE
  (postgresql-connect host: "localhost" user: "foo" passwd: "bar")
  ;; => #<postgresql-connection #36>
#+END_EXAMPLE

But, often, we may want to close the connection when garbage collected
so we, the developer, don't need to worry about hanging connections.
Thus, =std/db/dbi#sql-connect= is often the better choice as it =will='s
the =sql-close= into being.

#+BEGIN_EXAMPLE
  (import :std/db/dbi)
  (def pg (sql-connect postgresql-connect host: "localhost" user: "foo" passwd: "bar"))
  ;; => #<postgresql-connection #36>
#+END_EXAMPLE

*** =defcatalog=, Postgresql->Gerbil->Postgresql mapping
    :PROPERTIES:
    :CUSTOM_ID: defcatalog-postgresql-gerbil-postgresql-mapping
    :END:

A catalog tells us what to do with what postgresql gives us.

Here's the basic syntax.

#+BEGIN_EXAMPLE
  ((_ (name mixin ...) (oids serialize deserialize) ...)
#+END_EXAMPLE

A mixin is not always needed. Here is our first version.

#+BEGIN_EXAMPLE
  (defcatalog my-default-catalog
    ;; BOOLOID
    ((16) (lambda _ "TRUE") (lambda _ 42))
    ;; INT8OID INT2OID INT4OID FLOAT4OID FLOAT8OID NUMERICOID
    ((20 21 23 700 701 1700) (lambda _ "42") (lambda _ 42)))
#+END_EXAMPLE

Try it out by =parameterize='ing the
[[#currentCatalog][=current-catalog=]].

#+BEGIN_EXAMPLE
  (parameterize ((current-catalog my-default-catalog))
    (sql-eval-query pg "SELECT 1, FALSE WHERE $1" 'hey-you))
  ;; => (#(42 42))
#+END_EXAMPLE

*** =defcatalog-default=
    :PROPERTIES:
    :CUSTOM_ID: defcatalog-default
    :END:

By default there is a [[#defaultCatalog][=default-catalog=]]. If we want
to declare a new type within the default this is where to go.

For example, *PostgreSQL* has a *JSON* type.

#+BEGIN_EXAMPLE
  (let (stmt (sql-prepare pg "SELECT typname, oid FROM pg_catalog.pg_type WHERE typname ILIKE '%json%'"))
            (cons (sql-columns stmt) (sql-query stmt)))

  ;; => (("typname" "oid") #("json" "114") #("jsonb" "3802") #("jsonpath" "4072")
  ;;      #("_json" "199") #("_jsonb" "3807") #("_jsonpath" "4073"))
#+END_EXAMPLE

And, *Gerbil* does as well! Actually, the =:std/test/json= just turns it
into a hash table.

First we see the =oid='s for postgres' json types. Select them as JSON
to see that as well.

#+BEGIN_EXAMPLE
  (import :std/text/json)

  (def res
    (let (stmt
          (sql-prepare pg "SELECT json_build_object(typname, oid)
    FROM pg_catalog.pg_type WHERE typname ILIKE '%json%'"))

            (cons (sql-columns stmt) (sql-query stmt))))
  ;; => (("json_build_object") "{\"json\" : \"114\"}" "{\"jsonb\" : \"3802\"}"
  ;;      "{\"jsonpath\" : \"4072\"}" "{\"_json\" : \"199\"}" "{\"_jsonb\" :
  ;;      \"3807\"}" "{\"_jsonpath\" : \"4073\"}")
  ;;

  (def json-res (map (cut call-with-input-string <> read-json) (cdr res)))

  (map table->list json-res)
  ;; => (((json . "114")) ((jsonb . "3802")) ((jsonpath . "4072"))
  ;;    ((_json . "199")) ((_jsonb . "3807")) ((_jsonpath . "4073")))
#+END_EXAMPLE

All we need is to (de)serialize them...

#+BEGIN_EXAMPLE
  (def (serialize-json gerbil-json)
   (call-with-output-string "" (cut write-json gerbil-json <>)))

  (def (deserialize-json str)
    (call-with-input-string str read-json))
#+END_EXAMPLE

... and add them to the default catalog.

#+BEGIN_EXAMPLE
  (defcatalog-default ((114 3802) serialize-json deserialize-json))
#+END_EXAMPLE

Now our query return hash tables.

#+BEGIN_EXAMPLE
  (let (stmt (sql-prepare pg "SELECT json_build_object(typname, oid) FROM pg_catalog.pg_type WHERE typname ILIKE '%json%'"))
    (cons (sql-columns stmt) (sql-query stmt)))
  ;; => (("json_build_object") #<table #47> #<table #48> #<table #49> #<table #50>
  ;;      #<table #51> #<table #52>)
#+END_EXAMPLE

Even better, we can pass them to queries!

#+BEGIN_EXAMPLE
  (let (stmt (sql-prepare pg "SELECT * from json_each_text($1)"))
    (cons (sql-columns stmt) (begin (sql-bind stmt (list->hash-table '(("foo" . 1) ("bar" . "baz"))))
                                    (sql-query stmt))))
  ;; => (("key" "value") #("bar" "baz") #("foo" "1"))
#+END_EXAMPLE

*** =default-catalog=
    :PROPERTIES:
    :CUSTOM_ID: default-catalog
    :END:

What if we only want to change certain things from the default and not
have them be default, yet still have most of the default (de)serializers
available? =default-catalog= and [[#defcatalog][=defcatalog=]] to the
rescue.

Yes, mixin time!

First, note the difference. The default has a timestamp whereas ours
does not.

#+BEGIN_EXAMPLE
  (sql-eval-query pg "SELECT '2021-03-12'::timestamp, 1")
  ;; => (#(#<date #57 nanosecond: 0 second: 0 minute: 0 hour: 0 day: 12 month: 3
  ;;       year: 2021 zone-offset: 0> 1))
  (parameterize ((current-catalog my-default-catalog))
    (sql-eval-query pg "SELECT '2021-03-12'::timestamp, 1"))
  ;;=> (#("2021-03-12 00:00:00" 42))
#+END_EXAMPLE

Make a new catalog with some mixins.

#+BEGIN_EXAMPLE
  (defcatalog (united-default-catalog my-default-catalog default-catalog))
#+END_EXAMPLE

Which works as expected.

#+BEGIN_EXAMPLE
  (parameterize ((current-catalog united-default-catalog))
    (sql-eval-query pg "SELECT '2021-03-12'::timestamp, 1"))
  ;; => (#(#<date #58 nanosecond: 0 second: 0 minute: 0 hour: 0 day: 12 month: 3
  ;;         year: 2021 zone-offset: 0> 42))
#+END_EXAMPLE

*** =current-catalog=
    :PROPERTIES:
    :CUSTOM_ID: current-catalog
    :END:

The =current-catalog= parameter determines which catalog is used by
default.

#+BEGIN_EXAMPLE
  (eq? (current-catalog) default-catalog) ;; =? #t
#+END_EXAMPLE

We can =parameterize= it.

#+BEGIN_EXAMPLE
   [ (parameterize ((current-catalog my-default-catalog))
       (sql-eval-query pg "SELECT '2021-03-12'::timestamp, 1"))
     (parameterize ((current-catalog united-default-catalog))
       (sql-eval-query pg "SELECT '2021-03-12'::timestamp, 1")) ]
  ;; => ( (#("2021-03-12 00:00:00" 42))
  ;;      (#(#<date #62 nanosecond: 0 second: 0 minute: 0 hour: 0 day: 12 month: 3
  ;    ;       year: 2021 zone-offset: 0> 42)))
#+END_EXAMPLE

Use it to declare a global default.

#+BEGIN_EXAMPLE
  (current-catalog my-default-catalog)

  (sql-eval-query pg "SELECT 1") ;; => (42)
#+END_EXAMPLE

Don't forget to set it back :).

#+BEGIN_EXAMPLE
  (current-catalog default-catalog)

  (sql-eval-query pg "SELECT 1") ;; => (1)
#+END_EXAMPLE

** Connection Pools
   :PROPERTIES:
   :CUSTOM_ID: connection-pools
   :END:

#+BEGIN_EXAMPLE
  (import :std/db/conpool)
#+END_EXAMPLE

A connection pool is simply a pool of database connections that use the
same connect function. Beyond that there's a =max= parameter where one
can specify the max connections.

*** =make-conpool=
    :PROPERTIES:
    :CUSTOM_ID: make-conpool
    :END:

We need a pool to grab db connections from. The init for a conpool is
simple enough.

#+BEGIN_EXAMPLE
  (lambda (self connect (max #f)) ... )
#+END_EXAMPLE

So let's make a pool.

#+BEGIN_EXAMPLE
  (def (make-pgpool)
    (make-conpool
     (cut sql-connect postgresql-connect
          host: "localhost" user: "foo" passwd: "bar" db: "baz")
     2))

  (def pgpool (make-pgpool))
#+END_EXAMPLE

We now have a pool of two connections to our database. Yay!

*** =conpool?=
    :PROPERTIES:
    :CUSTOM_ID: conpool
    :END:

A predicate. I'll leave you to guess what it does by looking at the
code.

#+BEGIN_EXAMPLE
  (conpool? pgpool) ;; => #t
  (conpool? 'not-pgpool) ;; => #f
#+END_EXAMPLE

*** =conpool-get=
    :PROPERTIES:
    :CUSTOM_ID: conpool-get
    :END:

A way to get a connection is somewhat important.
=(conpool-get pool timeout-in-seconds)= is that way.

#+BEGIN_EXAMPLE
  (def (conpool-get cp (timeo absent-obj)) ...)
#+END_EXAMPLE

That timeout is somewhat important was well. After all, we only have two
connections and once they are used, once, for now ....

#+BEGIN_EXAMPLE
  (def (my-first-query q . args)
    (apply sql-eval-query (conpool-get pgpool 5) q args))

  (my-first-query "select 42") ;; => (42)
  (my-first-query "select 42") ;; => (42)

  ;; But!!

  (my-first-query "select 42")

  ; Evaluation aborted on conpool-get: [timeout-error] Error getting connection; timeout
#+END_EXAMPLE

Because of that we need to close and reset the conpool for now using
[[#conpoolClose][=conpool-close=]].

#+BEGIN_EXAMPLE
  (conpool-close pgpool)
  (set! pgpool (make-pgpool))
#+END_EXAMPLE

*** =conpool-put=
    :PROPERTIES:
    :CUSTOM_ID: conpool-put
    :END:

When we're done with a connection that's still working we need to put it
back.

#+BEGIN_EXAMPLE
  (import :std/sugar)

  (def (my-sql-e sql-fn . args)
    (def con (conpool-get pgpool 5))
    (try
     (apply sql-fn con args)
     (finally (conpool-put pgpool con))))
#+END_EXAMPLE

It works.

#+BEGIN_EXAMPLE
  (my-sql-e sql-eval-query "select 42") ;; => (42)
  (my-sql-e sql-eval-query "select 42") ;; => (42)
  (my-sql-e sql-eval-query "select 42") ;; => (42)
  (my-sql-e sql-eval-query "select 42") ;; => (42)
  ;;; etc ...
#+END_EXAMPLE

But there's still a problem of course. Connections themselves may have
errors so they do not work.

Like, for example, erroring out in the middle of a transaction.

#+BEGIN_EXAMPLE
  (my-sql-e sql-eval-query "begin;") ;; => ()
  (my-sql-e sql-eval-query "select foo")
  ; Evaluation aborted on postgresql-prepare!: [sql-error] column "foo" does not
  ; exist --- irritants: (S . ERROR) (V . ERROR) (C . 42703) (M . column "foo"
  ; does not exist) (P . 8) (F . parse_relation.c) (L . 3349) (R .
  ; errorMissingColumn)

  (my-sql-e sql-eval-query "select 1")
  ; Evaluation aborted on postgresql-prepare!: [sql-error] current transaction is
  ; aborted, commands ignored until end of transaction block --- irritants: (S .
  ; ERROR) (V . ERROR) (C . 25P02) (M . current transaction is aborted, commands
  ; ignored until end of transaction block) (F . postgres.c) (L . 1424) (R .
  ; exec_parse_message)
#+END_EXAMPLE

We can still use [[#conpoolClose][=conpool-close=]], of course, but
closing the entire conpool because one connection is in error ruins the
point of a pool, more or less.

#+BEGIN_EXAMPLE
  (conpool-close pgpool)
  (set! pgpool (make-pgpool))
#+END_EXAMPLE

To get around that, [[#conpoolRelease][=conpool-release=]] does exactly
what we want.

*** =conpool-release=
    :PROPERTIES:
    :CUSTOM_ID: conpool-release
    :END:

In the case of an error the easy way is to release the connection. This
basically says to the pool maintenance guy that there's been some usage
and we need to refill it a little bit.

#+BEGIN_EXAMPLE
  (import :std/sugar)

  (def (my-sql-ee sql-fn . args)
    (def err #f)
    (def con (conpool-get pgpool 5))
    (try
     (apply sql-fn con args)
     (catch (e) (set! err e))
     (finally
      (if err (begin (conpool-release pgpool con) (raise err))
          (conpool-put pgpool con)))))
#+END_EXAMPLE

Now it always has the pool ready for swimmers.

#+BEGIN_EXAMPLE
  (my-sql-e sql-eval-query "begin;") ;; => ()
  (my-sql-e sql-eval-query "select foo")
  ; Evaluation aborted on postgresql-prepare!: [sql-error] column "foo" does not
  ; exist --- irritants: (S . ERROR) (V . ERROR) (C . 42703) (M . column "foo"
  ; does not exist) (P . 8) (F . parse_relation.c) (L . 3349) (R .
  ; errorMissingColumn)

  (my-sql-e sql-eval-query "select 1") ;; => (1)
#+END_EXAMPLE

*** =conpool-close=
    :PROPERTIES:
    :CUSTOM_ID: conpool-close
    :END:

If you've read this far you already know: =conpool-close= is for closing
a conpool. After all, one does need to shut things down and often
database servers prefer a clean shutdown of an open connection.

#+BEGIN_EXAMPLE
  (conpool-close pgpool)

  (my-sql-ee sql-eval-query "select 1")
  ; Evaluation aborted on Connection pool is closed
#+END_EXAMPLE
